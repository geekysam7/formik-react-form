{"version":3,"sources":["index.js"],"names":["SignupForm","initialValues","firstName","lastName","email","validationSchema","Yup","max","required","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","className","htmlFor","name","type","component","ReactDOM","render","document","getElementById"],"mappings":"mKAAA,4DAkCMA,GAlCN,MAkCmB,WAuBf,OACI,kBAAC,IAAD,CACAC,cAAiB,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,IAEXC,iBAAqBC,IAAW,CAC5BJ,UAAWI,MACVC,IAAI,GAAI,iCACRC,SAAS,YACVL,SAAUG,MACTC,IAAI,GAAI,iCACRC,SAAS,YACVJ,MAAOE,MACNF,MAAM,yBACNI,SAAS,cAEdC,SAAU,SAACC,EAAD,GAA8B,IAApBC,EAAmB,EAAnBA,cAChBC,YAAW,WACPC,MAAMC,KAAKC,UAAUL,EAAQ,KAAM,IACnCC,GAAc,KACf,OAGP,yBAAKK,UAAU,gBACX,kBAAC,IAAD,CAAMA,UAAU,eACZ,2BAAOA,UAAU,aAAaC,QAAQ,aAAtC,cACA,kBAAC,IAAD,CAAOD,UAAU,aAAaE,KAAK,YAAYC,KAAK,SACpD,kBAAC,IAAD,CAAcC,UAAU,MAAMJ,UAAU,gBAAgBE,KAAK,cAC7D,2BAAOF,UAAU,aAAaC,QAAQ,YAAtC,aACA,kBAAC,IAAD,CAAOD,UAAU,aAAaE,KAAK,WAAWC,KAAK,SACnD,kBAAC,IAAD,CAAcC,UAAU,MAAMJ,UAAU,gBAAgBE,KAAK,aAC7D,2BAAOF,UAAU,aAAaC,QAAQ,SAAtC,SACA,kBAAC,IAAD,CAAOD,UAAU,aAAaE,KAAK,QAAQC,KAAK,UAChD,kBAAC,IAAD,CAAcC,UAAU,MAAMJ,UAAU,gBAAgBE,KAAK,UAC7D,4BAAQF,UAAU,MAAMG,KAAK,UAA7B,eAOhBE,IAASC,OACL,kBAACtB,EAAD,MACAuB,SAASC,eAAe,U","file":"static/js/main.cca70757.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './index.css';\r\n\r\n//Creating a custom validation funciton so we do not limit our\r\n//code to just browsers.\r\n\r\n// const validate = values => {\r\n//     const errors = {};\r\n//     if (!values.firstName) {\r\n//         errors.firstName = 'Required';\r\n//     }else if (values.firstName.length > 15 ) {\r\n//         errors.firstName = 'Must be 15 characters or less';\r\n//     }\r\n\r\n//     if (!values.lastName) {\r\n//         errors.lastName = 'Required';\r\n//     } else if (values.lastName.length > 20 ) {\r\n//         errors.lastName = 'Must be 20 characters or less';\r\n//     }\r\n\r\n//     if (!values.email) {\r\n//         errors.email = 'Required';\r\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n//         errors.email = 'Invalid email address';\r\n//     }\r\n\r\n//     return errors;\r\n// };\r\n\r\n//Implemented the above custom validation using yup.\r\n\r\nconst SignupForm = () => {\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //         firstName: '',\r\n    //         lastName: '',\r\n    //         email: '',\r\n    //     },\r\n    //     validationSchema: Yup.object({\r\n    //         firstName: Yup.string()\r\n    //         .max(15, 'Must be 15 characters or less')\r\n    //         .required('Required'),\r\n    //         lastname: Yup.string()\r\n    //         .max(20, 'Must be 20 characters or less')\r\n    //         .required('Required'),\r\n    //         email: Yup.string()\r\n    //         .email('Invalid email address')\r\n    //         .required('Required'),\r\n    //     }),\r\n    //     onSubmit: values => {\r\n    //         alert(JSON.stringify(values, null, 2));\r\n    //     },\r\n    // });\r\n\r\n    return (\r\n        <Formik\r\n        initialValues = {{\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n        }}\r\n        validationSchema = { Yup.object({\r\n            firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n            lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n            email: Yup.string()\r\n            .email('Invalid email address')\r\n            .required('Required'),\r\n        })}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            setTimeout(() => {\r\n                alert(JSON.stringify(values, null, 2));\r\n                setSubmitting(false);\r\n            }, 400);\r\n        }}\r\n        >\r\n        <div className=\"at-form-back\">\r\n            <Form className=\"center-form\">\r\n                <label className=\"form-label\" htmlFor=\"firstName\">First Name</label>\r\n                <Field className=\"input-area\" name=\"firstName\" type=\"text\" />\r\n                <ErrorMessage component=\"div\" className=\"error-message\" name=\"firstName\" />\r\n                <label className=\"form-label\" htmlFor=\"lastName\">Last Name</label>\r\n                <Field className=\"input-area\" name=\"lastName\" type=\"text\" />\r\n                <ErrorMessage component=\"div\" className=\"error-message\" name=\"lastName\" />\r\n                <label className=\"form-label\" htmlFor=\"email\">Email</label>\r\n                <Field className=\"input-area\" name=\"email\" type=\"email\" />\r\n                <ErrorMessage component=\"div\" className=\"error-message\" name=\"email\" />\r\n                <button className=\"btn\" type=\"submit\">Submit</button>\r\n            </Form>\r\n        </div>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nReactDOM.render(\r\n    <SignupForm/>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}